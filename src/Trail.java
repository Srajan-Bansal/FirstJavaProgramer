import Kunal_Kushwaha.LinkedList.Questions.LinkedListLeetcode;import java.util.*;public class Trail {    public static void main(String[] args) {        int n = (int)Math.sqrt(45);        System.out.println(squareRoot(1000, 4));    }    static float squareRoot(int number, int precision) {        int start = 0, end = number;        int mid;        // variable to store the answer        double ans = 0.0;        // for computing integral part        // of square root of number        while (start <= end) {            mid = (start + end) / 2;            if (mid * mid == number) {                ans = mid;                break;            }            // incrementing start if integral            // part lies on right side of the mid            if (mid * mid < number) {                start = mid + 1;                ans = mid;            }            // decrementing end if integral part            // lies on the left side of the mid            else {                end = mid - 1;            }        }        // For computing the fractional part        // of square root upto given precision        double increment = 0.1;        for (int i = 0; i < precision; i++) {            while (ans * ans <= number) {                ans += increment;            }            // loop terminates when ans * ans > number            ans = ans - increment;            increment = increment / 10;        }        return (float)ans;    }    static int val(int x) {        if (x < 2) {            return x;        }        long s = 1;        long e = x / 2;        long ans = 0;        while(s <= e) {            long m = s + (e - s) / 2;            if (m * m < x) {                s = m + 1;                ans = m;            } else if (m * m > x) {                e = m - 1;            } else {                return (int)m;            }        }        return (int)ans;    }}