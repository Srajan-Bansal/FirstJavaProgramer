import ElementsOfProgramming.Trees.TreeLeetcode;import Kunal_Kushwaha.LinkedList.Questions.LinkedListLeetcode;import java.util.*;public class Trail implements LinkedListLeetcode, TreeLeetcode {    public static void main(String[] args) {        Trail s = new Trail();        int[] num = {1, 2, 4, 8};        System.out.println(s.largestDivisibleSubset(num));    }    public List<Integer> largestDivisibleSubset(int[] nums) {        int[] dp = new int[nums.length + 1];        Arrays.fill(dp, -1);        largestDivisibleSubset(nums, 0, 1, new ArrayList<>(), dp);        return list;    }    List<Integer> list = new ArrayList<>();    public void largestDivisibleSubset(int[] nums, int i, int prev, List<Integer> temp, int[] dp) {        if (i == nums.length) {            if (list.size() < temp.size()) {                list.clear();                list.addAll(temp);            }            return;        }        if (dp[i] < temp.size() && (nums[i] % prev == 0 || prev % nums[i] == 0)) {            dp[i] = temp.size();            temp.add(nums[i]);            largestDivisibleSubset(nums, i + 1, nums[i], temp, dp);            temp.remove(temp.size() - 1);        }        largestDivisibleSubset(nums, i + 1, prev, temp, dp);    }}